/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 scene.gltf 
*/
"use client";
import React, { useRef, useEffect } from "react";
import {
  useGLTF,
  useAnimations,
  OrbitControls,
  Environment,
  PivotControls,
} from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";
import * as TWEEN from "@tweenjs/tween.js";
import { useControls } from "leva";
import { Perf } from "r3f-perf";
import * as THREE from "three";

export function Model(props) {
  const group = useRef();
  const { nodes, materials, animations } = useGLTF("/web3d/lab2/scene.gltf");

  // Get animation actions using useAnimations
  const { actions } = useAnimations(animations, group.current);

  const snowAnimation = actions["particle.000Action"];
  const treeSmallAnimation = actions["Circle.002Action.001"];
  const treeMedAnimation = actions["Circle.002Action.002"];
  const treeLargeAnimation = actions["Circle.006Action"];

  const snowMesh = useRef();
  const initialSnowPosition = [1.372, 9.351, -2.05];

  // Create arrays to store references to duplicated snow meshes and animations
  const duplicatedSnowMeshes = useRef([]);
  const duplicatedSnowAnimations = useRef([]);

  const sky1 = "/web3d/lab2/sky1.hdr";
  const sky2 = "/web3d/lab2/sky2.hdr";
  const sky3 = "/web3d/lab2/sky3.hdr";
  const winter = "/web3d/lab2/winter.hdr";
  const night = "/web3d/lab2/night.hdr";

  const perfStyle = {
    position: "absolute",
    top: 0,
    left: 0,
    right: 700,
    zIndex: 1,
  };

  const { orbit, perf } = useControls({
    orbit: true,
    perf: false,
  });
  const { hideModel, modelScale, pivot } = useControls(
    "Model",

    {
      hideModel: false,
      modelScale: {
        value: 1,
        min: 0.5,
        max: 3,
        step: 0.5,
      },
      pivot: false,
    },
    { collapsed: true }
  );
  const { snow, tree1, tree2, tree3 } = useControls(
    "Animations",
    { snow: false, tree1: false, tree2: false, tree3: false },
    { collapsed: true }
  );

  const { hdri } = useControls(
    "Envirement",

    {
      hdri: {
        value: 0, // Set the index of the default texture
        options: [0, 1, 2, 3, 4],
      },
    },
    { collapsed: true }
  );

  const { hideGlass } = useControls(
    "Glass",

    {
      hideGlass: false,
    },
    { collapsed: true }
  );

  const { hideHouse, front_back, sides, top_front_back } = useControls(
    "House",

    {
      hideHouse: false,
      front_back: "#9B5440",
      sides: "#9B5440",
      top_front_back: "#C96E55",
    },
    { collapsed: true }
  );

  const hdriSelect = [sky1, sky2, sky3, night, winter];
  const selectedHdri = hdriSelect[hdri];

  // Effect to start or stop the particle animation based on the state
  useEffect(() => {
    if (treeSmallAnimation) {
      if (tree1) {
        treeSmallAnimation.play();
      } else {
        treeSmallAnimation.stop();
        treeSmallAnimation.reset(); // Reset the animation to the initial state
      }
    }
    if (treeMedAnimation) {
      if (tree2) {
        treeMedAnimation.play();
      } else {
        treeMedAnimation.stop();
        treeMedAnimation.reset(); // Reset the animation to the initial state
      }
    }
    if (treeLargeAnimation) {
      if (tree3) {
        treeLargeAnimation.play();
      } else {
        treeLargeAnimation.stop();
        treeLargeAnimation.reset(); // Reset the animation to the initial state
      }
    }
  }, [tree1, tree2, tree3]);

  // Effect to duplicate the snow mesh and its animation at regular intervals
  useEffect(() => {
    const intervalId = setInterval(() => {
      if (snowMesh.current) {
        const newSnowMesh = snowMesh.current.clone();
        newSnowMesh.position.set(...initialSnowPosition);
        group.current.add(newSnowMesh);

        const snowAnimationAction = actions["particle.000Action"];
        if (snowAnimationAction) {
          const newSnowAnimation = snowAnimationAction
            .getMixer()
            .clipAction(snowAnimationAction.getClip())
            .reset();
          newSnowAnimation.play();

          // Store references to the duplicated snow mesh and animation
          duplicatedSnowMeshes.current.push(newSnowMesh);
          duplicatedSnowAnimations.current.push(newSnowAnimation);
        }
      }
    }, 2500); // Duplicate every 2 seconds

    return () => clearInterval(intervalId);
  }, []);

  const { camera } = useThree();
  // Function to handle chair clicks
  const handleClick = (targetPosition, targetLookAt) => {
    const duration = 1500; // in milliseconds
    const easingPosition = TWEEN.Easing.Quadratic.Out;
    const easingRotation = TWEEN.Easing.Quadratic.Out;

    new TWEEN.Tween(camera.rotation)
      .to({ x: targetLookAt.x, y: targetLookAt.y, z: targetLookAt.z }, duration)
      .easing(easingRotation)
      .start();

    new TWEEN.Tween(camera.position)
      .to(targetPosition, duration)
      .easing(easingPosition)
      .start();
  };

  useFrame(() => {
    TWEEN.update();
  });

  return (
    <>
      <Environment background files={selectedHdri} />
      {perf ? <Perf style={perfStyle} /> : null}

      {/* Ambient light to provide some overall illumination */}

      {/* Directional light simulating sunlight */}
      <directionalLight
        position={[40, 8, 0]}
        lookAt={[8.436, 2.266, -0.009]}
        intensity={5}
        castShadow
      />

      <OrbitControls enabled={orbit} />
      {!hideModel ? (
        <group ref={group} {...props} dispose={null}>
          {pivot ? (
            <PivotControls
              anchor={[0, 0, 0]}
              depthTest={false}
              scale={3}
              enabled={false}
            >
              <group name="Scene" scale={modelScale}>
                <group
                  name="Lattice"
                  position={[0, 5.242, 0]}
                  scale={[5.613, 4.662, 5.369]}
                />
                <mesh
                  name="Base"
                  geometry={nodes.Base.geometry}
                  material={materials["Material.004"]}
                  position={[0, 2.731, 0]}
                >
                  <mesh
                    name="SnowBall003"
                    geometry={nodes.SnowBall003.geometry}
                    material={materials.Snow}
                    position={[0.02, -0.252, 0.007]}
                  />
                </mesh>
                {!hideGlass ? (
                  <mesh
                    name="Glass"
                    geometry={nodes.Glass.geometry}
                    material={materials.GLASS}
                    position={[0, 6.239, 0]}
                    scale={6.687}
                  />
                ) : null}

                {!hideHouse ? (
                  <>
                    <mesh
                      name="Home"
                      geometry={nodes.Home.geometry}
                      material={nodes.Home.material}
                      position={[0, 3.027, 0]}
                      scale={[1, 1, 0.803]}
                      onClick={() =>
                        handleClick(
                          new THREE.Vector3(0, 7 * modelScale, 20 * modelScale),
                          [0, 3.027 * modelScale, 0]
                        )
                      }
                    >
                      <mesh
                        name="Fire"
                        geometry={nodes.Fire.geometry}
                        material={materials["Material.005"]}
                        position={[1.509, 2.456, -0.454]}
                        scale={[0.424, 0.424, 0.528]}
                        onClick={() =>
                          handleClick(
                            new THREE.Vector3(
                              0,
                              7 * modelScale,
                              20 * modelScale
                            ),
                            [0, 3.027 * modelScale, 0]
                          )
                        }
                      />

                      <mesh
                        name="Front-Back"
                        geometry={nodes["Front-Back"].geometry}
                        material={materials["Material.003"]}
                        position={[0, -0.139, 2]}
                        rotation={[0, 1.571, 0]}
                        scale={[1.246, 1, 1]}
                        onClick={() =>
                          handleClick(
                            new THREE.Vector3(
                              0,
                              7 * modelScale,
                              20 * modelScale
                            ),
                            [0, 3.027 * modelScale, 0]
                          )
                        }
                      >
                        <meshStandardMaterial color={front_back} />
                      </mesh>
                      <mesh
                        name="Sides"
                        geometry={nodes.Sides.geometry}
                        material={materials["Material.003"]}
                        position={[2, -0.139, 0]}
                        scale={[1, 1, 1.246]}
                        onClick={() =>
                          handleClick(
                            new THREE.Vector3(
                              0,
                              7 * modelScale,
                              20 * modelScale
                            ),
                            [0, 3.027 * modelScale, 0]
                          )
                        }
                      >
                        <meshStandardMaterial color={sides} />
                      </mesh>
                      <mesh
                        name="SnowBall001"
                        geometry={nodes.SnowBall001.geometry}
                        material={materials["Snow.001"]}
                        position={[-0.009, 2.521, 0.015]}
                        scale={[1, 1, 1.246]}
                      />
                      <mesh
                        name="SnowBall002"
                        geometry={nodes.SnowBall002.geometry}
                        material={materials["Snow.002"]}
                        position={[1.492, 4.129, -0.441]}
                        scale={[1, 1, 1.246]}
                      />
                      <mesh
                        name="Top-Front-Back"
                        geometry={nodes["Top-Front-Back"].geometry}
                        material={materials["Material.004"]}
                        position={[0, -0.139, 0]}
                      >
                        <meshStandardMaterial color={top_front_back} />
                      </mesh>
                    </mesh>
                  </>
                ) : null}

                {snow ? (
                  <mesh
                    name="Snow"
                    ref={snowMesh}
                    geometry={nodes.Snow.geometry}
                    material={materials["Material.002"]}
                    position={[1.372, 9.351, -2.05]}
                    scale={0.032}
                  />
                ) : null}

                <mesh
                  name="TreemedStand"
                  geometry={nodes.TreemedStand.geometry}
                  material={materials["Material.003"]}
                  position={[-2.512, 2.7, 4.875]}
                  scale={0.359}
                >
                  <mesh
                    name="Treemed"
                    geometry={nodes.Treemed.geometry}
                    material={materials.Snow}
                    rotation={[0, -0.031, 0]}
                  />
                </mesh>
                <mesh
                  name="TreesmallStand"
                  geometry={nodes.TreesmallStand.geometry}
                  material={materials["Material.003"]}
                  position={[0.729, 2.7, 4.875]}
                  scale={0.227}
                >
                  <mesh
                    name="Treesmall"
                    geometry={nodes.Treesmall.geometry}
                    material={materials.Snow}
                    rotation={[0, 0, 0.016]}
                  />
                </mesh>
                <mesh
                  name="TtreelargeStand"
                  geometry={nodes.TtreelargeStand.geometry}
                  material={materials["Material.003"]}
                  position={[3.575, 2.7, 1.705]}
                  scale={0.509}
                >
                  <mesh
                    name="Treelarge"
                    geometry={nodes.Treelarge.geometry}
                    material={materials.Snow}
                    scale={[1, 1.034, 1]}
                  />
                </mesh>
              </group>
            </PivotControls>
          ) : (
            <group name="Scene" scale={modelScale}>
              <group
                name="Lattice"
                position={[0, 5.242, 0]}
                scale={[5.613, 4.662, 5.369]}
              />
              <mesh
                name="Base"
                geometry={nodes.Base.geometry}
                material={materials["Material.004"]}
                position={[0, 2.731, 0]}
              >
                <mesh
                  name="SnowBall003"
                  geometry={nodes.SnowBall003.geometry}
                  material={materials.Snow}
                  position={[0.02, -0.252, 0.007]}
                />
              </mesh>
              {!hideGlass ? (
                <mesh
                  name="Glass"
                  geometry={nodes.Glass.geometry}
                  material={materials.GLASS}
                  position={[0, 6.239, 0]}
                  scale={6.687}
                />
              ) : null}

              {!hideHouse ? (
                <>
                  <mesh
                    name="Home"
                    geometry={nodes.Home.geometry}
                    material={nodes.Home.material}
                    position={[0, 3.027, 0]}
                    scale={[1, 1, 0.803]}
                    onClick={() =>
                      handleClick(
                        new THREE.Vector3(0, 7 * modelScale, 20 * modelScale),
                        [0, 3.027 * modelScale, 0]
                      )
                    }
                  >
                    <mesh
                      name="Fire"
                      geometry={nodes.Fire.geometry}
                      material={materials["Material.005"]}
                      position={[1.509, 2.456, -0.454]}
                      scale={[0.424, 0.424, 0.528]}
                      onClick={() =>
                        handleClick(
                          new THREE.Vector3(0, 7 * modelScale, 20 * modelScale),
                          [0, 3.027 * modelScale, 0]
                        )
                      }
                    />

                    <mesh
                      name="Front-Back"
                      geometry={nodes["Front-Back"].geometry}
                      material={materials["Material.003"]}
                      position={[0, -0.139, 2]}
                      rotation={[0, 1.571, 0]}
                      scale={[1.246, 1, 1]}
                      onClick={() =>
                        handleClick(
                          new THREE.Vector3(0, 7 * modelScale, 20 * modelScale),
                          [0, 3.027 * modelScale, 0]
                        )
                      }
                    >
                      <meshStandardMaterial color={front_back} />
                    </mesh>
                    <mesh
                      name="Sides"
                      geometry={nodes.Sides.geometry}
                      material={materials["Material.003"]}
                      position={[2, -0.139, 0]}
                      scale={[1, 1, 1.246]}
                      onClick={() =>
                        handleClick(
                          new THREE.Vector3(0, 7 * modelScale, 20 * modelScale),
                          [0, 3.027 * modelScale, 0]
                        )
                      }
                    >
                      <meshStandardMaterial color={sides} />
                    </mesh>
                    <mesh
                      name="SnowBall001"
                      geometry={nodes.SnowBall001.geometry}
                      material={materials["Snow.001"]}
                      position={[-0.009, 2.521, 0.015]}
                      scale={[1, 1, 1.246]}
                    />
                    <mesh
                      name="SnowBall002"
                      geometry={nodes.SnowBall002.geometry}
                      material={materials["Snow.002"]}
                      position={[1.492, 4.129, -0.441]}
                      scale={[1, 1, 1.246]}
                    />
                    <mesh
                      name="Top-Front-Back"
                      geometry={nodes["Top-Front-Back"].geometry}
                      material={materials["Material.004"]}
                      position={[0, -0.139, 0]}
                    >
                      <meshStandardMaterial color={top_front_back} />
                    </mesh>
                  </mesh>
                </>
              ) : null}

              {snow ? (
                <mesh
                  name="Snow"
                  ref={snowMesh}
                  geometry={nodes.Snow.geometry}
                  material={materials["Material.002"]}
                  position={[1.372, 9.351, -2.05]}
                  scale={0.032}
                />
              ) : null}

              <mesh
                name="TreemedStand"
                geometry={nodes.TreemedStand.geometry}
                material={materials["Material.003"]}
                position={[-2.512, 2.7, 4.875]}
                scale={0.359}
              >
                <mesh
                  name="Treemed"
                  geometry={nodes.Treemed.geometry}
                  material={materials.Snow}
                  rotation={[0, -0.031, 0]}
                />
              </mesh>
              <mesh
                name="TreesmallStand"
                geometry={nodes.TreesmallStand.geometry}
                material={materials["Material.003"]}
                position={[0.729, 2.7, 4.875]}
                scale={0.227}
              >
                <mesh
                  name="Treesmall"
                  geometry={nodes.Treesmall.geometry}
                  material={materials.Snow}
                  rotation={[0, 0, 0.016]}
                />
              </mesh>
              <mesh
                name="TtreelargeStand"
                geometry={nodes.TtreelargeStand.geometry}
                material={materials["Material.003"]}
                position={[3.575, 2.7, 1.705]}
                scale={0.509}
              >
                <mesh
                  name="Treelarge"
                  geometry={nodes.Treelarge.geometry}
                  material={materials.Snow}
                  scale={[1, 1.034, 1]}
                />
              </mesh>
            </group>
          )}
        </group>
      ) : null}
    </>
  );
}

useGLTF.preload("/web3d/lab2/scene.gltf");
